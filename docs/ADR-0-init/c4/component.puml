@startuml component
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

Container_Boundary(telekeeper, "Telekeeper System") {

    Container_Boundary(bot, "Telegram Bot (Python / aiogram)") {
        Component(botHandler, "Bot Handler", "aiogram", "Handles incoming messages from Telegram via Bot API")
        Component(grpcClient, "gRPC Client", "Python", "Sends gRPC requests to the backend via Envoy")
        Component(eventPublisher, "Event Publisher", "Python + NATS SDK", "Publishes events to NATS JetStream")
    }

    Container_Boundary(backend, "Web Backend (Rails)") {
        Component(grpcServer, "gRPC Server", "Rails", "Handles gRPC calls from the Telegram Bot")
        Component(eventConsumer, "Event Consumer", "Rails + NATS SDK", "Consumes async events from NATS")
        Component(controller, "HTTP Controller", "Rails", "Handles user requests from frontend")
    }

    Container_Boundary(frontend, "Frontend (Turbo/Stimulus)") {
        Component(view, "View Layer", "Turbo/Stimulus", "Runs in Telegram WebView and provides UI for managing saved posts")
    }

    Container_Boundary(infra, "Infrastructure") {
        ComponentDb(db, "PostgreSQL", "Stores saved post text, tags, and lists")
        Component(nats, "NATS JetStream", "Event Broker", "Delivers async events between services")
        Component(dlq, "Dead Letter Queue", "NATS Stream", "Stores failed events for inspection")
        Component(envoy, "Envoy Proxy", "Proxy", "Routes gRPC traffic from bot to backend")
    }

    ' --- Relationships ---

    Rel(botHandler, grpcClient, "Sends post metadata via gRPC")
    Rel(botHandler, eventPublisher, "Publishes content events")
    Rel(grpcClient, envoy, "Forwards gRPC")
    Rel(envoy, grpcServer, "Proxies gRPC to")

    Rel(eventPublisher, nats, "Publishes to")
    Rel(nats, eventConsumer, "Delivers events to")
    Rel(nats, dlq, "Moves failed events to")

    Rel(controller, db, "Reads/writes content")
    Rel(grpcServer, db, "Reads/writes via business logic")
    Rel(eventConsumer, db, "Writes async content")

    Rel(view, controller, "User actions via Hotwire")
}

@enduml
