@startuml component
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

System_Boundary(telekeeper, "Telekeeper System") {

    Container_Boundary(bot, "Telegram Bot (Python + aiogram)") {
        Component(botHandler, "Bot Handler", "aiogram", "Handles incoming messages from Telegram via Bot API")
        Component(grpcClient, "gRPC Client", "Python", "Sends gRPC requests to the backend via Envoy")
        Component(eventPublisher, "Event Publisher", "Python + NATS SDK", "Publishes events to NATS JetStream")
        Component(mediaService, "Media Service", "Python + S3 SDK", "Handles requests to S3")
    }

    Container(envoy, "Sidecar gRPC Proxy", "Envoy", "Routes gRPC traffic from bot to backend")

    Container_Boundary(backend, "Backend (Rails)") {
        Component(grpcServer, "gRPC Server", "Rails", "Handles gRPC calls from the Telegram Bot")
        Component(eventConsumer, "Event Consumer", "Rails + NATS SDK", "Consumes async events from NATS")
        Component(controller, "HTTP Controller", "Rails", "Handles user requests from frontend")
        Component(redisClient, "Cache Manager", "Rails", "Handles requests to Redis")
        Component(domainServices, "Core Services", "Rails", "Domain-specific logic")
    }

    Container_Boundary(frontend, "Frontend (Turbo + Stimulus)") {
        Component(view, "View Layer", "Turbo/Stimulus", "Runs in Telegram WebView and provides UI for managing saved posts")
    }

    ComponentDb(db, "Relational storage", "PostgreSQL")
    ComponentDb(redis, "Cache", "Redis")
    ComponentDb_Ext(s3, "External object storage", "S3")
    Container_Boundary(eventBroker, "Event Broker (NATS)", "NATS", "Delivers async events between services") {
        Component(nats, "Events Stream", "NATS JetStream", "Handles asynchronous communication and event streaming")
        Component(dlq, "Dead Letter Queue", "NATS Stream", "Stores undelivered or failed events for inspection")
    }
    Component(dlq, "Dead Letter Queue", "NATS JetStream", "Stores failed events for inspection")

    ' --- Relationships ---

    Rel(botHandler, grpcClient, "Sends post metadata via gRPC")
    Rel(botHandler, eventPublisher, "Publishes content events")
    Rel(botHandler, mediaService, "Uploads media data")
    Rel(grpcClient, envoy, "Forwards gRPC")
    Rel(envoy, grpcServer, "Proxies gRPC to")

    Rel(eventPublisher, nats, "Publishes to")
    Rel(nats, eventConsumer, "Delivers events to")
    Rel(nats, dlq, "Moves failed events to")

    Rel(eventConsumer, domainServices, "Writes async content")
    Rel(controller, domainServices, "Business logic from web")
    Rel(grpcServer, domainServices, "Business logic from bot")
    Rel(domainServices, redisClient, "Read/Write frequently requested data")

    Rel(redisClient, redis, "Reads/writes cache")
    Rel(domainServices, db, "Reads/writes content")
    Rel(mediaService, s3, "Writes media data")

    Rel(view, controller, "User actions via Hotwire")
    Rel(view, s3, "Retrieves media data")
}

@enduml
