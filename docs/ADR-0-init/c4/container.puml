@startuml container
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(user, "Telegram User", "User of the Telekeeper bot and mini-app")

Boundary(telekeeper, "Telekeeper") {

    System_Boundary(bot, "Bot Application") {
        Container(botApp, "Telegram Bot", "Python + aiogram", "Receives and stores forwarded posts")
        Container(envoy, "Sidecar gRPC Proxy", "Envoy", "Handles gRPC traffic between bot and backend")
    }

    System_Boundary(web, "Web Application") {
        Container(frontend, "Frontend", "Turbo + Stimulus", "Runs in Telegram WebView and provides UI for managing saved posts")
        Container(backend, "Backend", "Ruby on Rails", "Processes requests, manages content and business logic")
    }

    Boundary(infra, "Infrastructure") {
        ContainerDb(db, "Relational Database", "PostgreSQL", "Stores saved post text, tags, and lists")
        ContainerDb(redis, "Cache", "Redis")
        Container(nats, "Event Broker", "NATS", "Handles asynchronous communication and event streaming")
    }
}

System_Ext(telegram, "Telegram", "Messaging platform")
System_Ext(s3, "S3", "Object storage for post attachments")
System_Ext(cdn, "Media CDN", "Content Delivery Network")

Rel(user, telegram, "Interacts with via messages and mini-app")
Rel(telegram, botApp, "Delivers messages via Bot API")
Rel(telegram, frontend, "Hosts WebView")

Rel(botApp, envoy, "Sends gRPC requests via")
Rel(envoy, backend, "Proxies gRPC to")

Rel(botApp, nats, "Publishes events to")
Rel(backend, nats, "Consumes events from")

Rel(backend, redis, "Caches data")
Rel(backend, db, "Reads/writes content")

Rel(botApp, s3, "Uploads media")
Rel(frontend, backend, "Sends user actions via Hotwire")
Rel(frontend, cdn, "Loads media content via")
Rel(cdn, s3, "Fetches media from")

@enduml
